shiny::runApp()
runApp()
shiny::runApp()
install.packages('vivainsights')
library(vivainsights)
library(dplyr)
glimpse()
glimpse(pq_data[,1:10])
pg_data %>% glimpse()
pg_data
pq_data %>% glimpse()
pg_dat %>% select(levelDesigntion)
pq_data %>% select(LevelDesignation)
hrvar_count()
hrvar_count(pq_data,hrvar = 'LevelDesignation')
library(ggplot2)
g<- ggplot(pq_data,aes(LevelDesignation))
g+geom_bar()
fct_order
g<- ggplot(pq_data,aes(fct_order(LevelDesignation)))
g+geom_bar()
library(tiderverse)
library(tidyverse)
g<- ggplot(pq_data,aes(fct_order(LevelDesignation)))
library(tidyverse)
g+geom_bar()
g<- ggplot(pq_data,aes(fct_infreq(LevelDesignation)))
g+geom_bar()
pq_data_grouped <-  pq_data %>%
filter(LevelDesignation %in% c("Manager", "Senior IC")) %>%
mutate(  ManagerIndicator =
factor(LevelDesignation,
levels = c("Manager", "Senior IC"))
)
pq_data_grouped <-
pq_data %>%
filter(LevelDesignation %in% c("Manager", "Senior IC")) %>%
mutate(
ManagerIndicator =
factor(LevelDesignation,
levels = c("Manager", "Senior IC"))
) %>%
group_by(PersonId, ManagerIndicator) %>%
summarise(Multitasking_hours = mean(Multitasking_hours), .groups = "drop")
glimpse(pq_data_grouped)
t.test
t.test(data=pq_data_grouped, Multitasking_hours~ManagerIndicator)
?t.test
pq_data_grouped %>%
group_by(ManagerIndicator) %>%
summarise(
p = shapiro.test(Multitasking_hours)$p.value,
statistic = shapiro.test(Multitasking_hours)$statistic
)
# Multitasking hours - IC
mth_ic <-
pq_data_grouped %>%
filter(ManagerIndicator == "Senior IC") %>%
pull(Multitasking_hours)
qqnorm(mth_ic, pch = 1, frame = FALSE)
qqline(mth_ic, col = "steelblue", lwd = 2)
g<- ggplot(mth_id,aes(Multitasking_hours))
g<- ggplot(mth_ic,aes(Multitasking_hours))
g<- ggplot(mth_ic)
mth_ic
ggplot(pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"'),
aes(Multitasking_hours))
g+stat_qq()
g<- ggplot(pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"'),
aes(Multitasking_hours))
g+stat_qq()
g<- ggplot(pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"'),
aes(Multitasking_hours))
g+stat_qq()+stat_qq_line()
g<- ggplot(pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"'),
aes(Multitasking_hours))
g+stat_qq()+stat_qq_line()
g<- ggplot(pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"'),
aes(sample=Multitasking_hours))
g+stat_qq()+stat_qq_line()
df <- data.frame(y = rt(200, df = 5))
p <- ggplot(df, aes(sample = y))
p + stat_qq() + stat_qq_line()
df
pq_data_grouped %>% filter(ManagerIndicator=='Senior IC"')%>% select(Multitasking_hours)
pq_data_grouped %>%select(Multitasking_hours)
pq_data_grouped %>%filter(anagerIndicator =="Senior IC") %>% select(Multitasking_hours)
pq_data_grouped %>%filter(anagerIndicator =="Senior IC")
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC")
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(Multitasking_hours)
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(Multitasking_hours) %>%
ggplot(aes()) + stat_qq()
ggplot(aes(Multitasking_hours)) + stat_qq()
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(Multitasking_hours)
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(y=Multitasking_hours)
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(y=Multitasking_hours)  %>%
ggplot(aes(y)) + stat_qq() +stat_qq_line()
ggplot(aes(sample=y)) + stat_qq() +stat_qq_line()
pq_data_grouped %>%filter(ManagerIndicator =="Senior IC") %>% select(y=Multitasking_hours)  %>%
ggplot(aes(sample=y)) + stat_qq() +stat_qq_line()
t.test(data=pq_data_grouped, Multitasking_hours~ManagerIndicator)
var.test(data=pq_data_grouped, Multitasking_hours~ManagerIndicator)
dotchart(
x = pq_data_grouped$Multitasking_hours,
groups = pq_data_grouped$ManagerIndicator
)
# This R script is for loading and transformat data
library(ggplot2)
get_default_df <- function(){
# get the datafram to analysis purpose.
# by default using the diamonds dataset from ggplot2
ggplot2::diamonds
}
default_df <- get_default_df()
get_var_names <- function(only_numeric=FALSE,df=default_df){
# get all variable names from data.frame
# parameter:
#   only_numeric(TRUE) to filter the numeric column only
#               (FALSE) get all variables names
if (is.null(df)){
df <- get_df()
}
if (!only_numeric) {
var_names <- df |> names()
}else {
var_names <- df |> select(where(is.numeric)) |> names()
}
}
get_y_names <- function(df=default_df){
# get target variables name list
# only use the numeric type variable as target variable to analysis purpose
y_var <- get_var_names(df, only_numeric = TRUE)
}
get_var_tbl <- function(var_name=NULL, df=default_df){
df |> select({{var_name }})
}
get_var_summary <- function(var_name=NULL, df=default_df){
if (is.null(var_name)){
warning('expect var_name input')
}
df |>
summarise(mean=mean(get(var_name)),
sd =   sd(get(var_name)),
n =    n(),
missing_rate = sum(is.na(get( var_name)))/n()
)|>
round(3)
}
kpi_value <- get_var_summary('carat') |> select(missing_rate) |> pull()
kpi_value <- get_var_summary('carat') |> select(missing_rate) |> pull()
library(tidyverse)
kpi_value <- get_var_summary('carat') |> select(missing_rate) |> pull()
kpi_value
kpi_value <- get_var_summary('carat') |> select(missing_rate)
kpi_value
kpi_value <- get_var_summary('carat') |> select(missing_rate) |> pull(1)
kpi_value
class(kpi_value)
class(11)
kpi_value[1]
kpi_value[2]
color_value <- case_when(
(kpi_value[1] >=0.05) ~ 'danger'
(kpi_value[1]<0.05) ~ 'warning',
near(kpi_value[1], 0) ~ 'success',
)
color_value
kpi_value[1]
kpi_value[1]>=0.05
kpi_value[1]<0.05
near(kpi_value[1],0)
0<kpi_value[1]<0.05
kpi_value[1]<0.05 and kpi_value >0
kpi_value[1]<0.05 & kpi_value >0
color_value <- case_when(
(kpi_value >=0.05) ~ 'danger'
(kpi_value<0.05 kpi_value >0) ~ 'warning',
color_value <- case_when(
(kpi_value >=0.05) ~ 'danger'
(kpi_value<0.05 kpi_value >0) ~ 'warning',
color_value <- case_when(
(kpi_value >=0.05) ~ 'danger'
(kpi_value<0.05 & kpi_value >0) ~ 'warning',
near(kpi_value, 0) ~ 'success',
)
case_when
?case_when
color_value <- case_when(
(kpi_value >=0.05) ~ 'danger'
(kpi_value<0.05 & kpi_value >0) ~ 'warning',
near(kpi_value, 0) ~ 'success',
.default~'success'
)
